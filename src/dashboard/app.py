"""
Aplica√ß√£o principal do dashboard Climate Analytics.
Dashboard interativo para visualiza√ß√£o de dados clim√°ticos e de qualidade do ar.
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import folium
from streamlit_folium import st_folium
from datetime import datetime, timedelta
import sys
import os

# Adiciona o diret√≥rio src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from config.settings import Config
from src.api.weather_api import OpenWeatherClient
from src.api.air_quality_api import AirQualityClient
from src.dashboard.advanced_components import DashboardComponents
from src.dashboard.welcome_simple import show_welcome_page

# Configura√ß√£o da p√°gina
st.set_page_config(**Config.STREAMLIT_CONFIG)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .alert-success {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    .alert-warning {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        color: #856404;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    .alert-danger {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def main():
    """Fun√ß√£o principal da aplica√ß√£o."""
    
    # Verificar se deve mostrar a p√°gina de boas-vindas
    if st.session_state.get('show_welcome', True):
        # Verifica se as APIs est√£o configuradas
        api_status = Config.validate_api_keys()
        
        # Se as APIs n√£o est√£o configuradas, mostra a p√°gina de boas-vindas
        if not all(api_status.values()):
            system_ready = show_welcome_page()
            if not system_ready:
                return  # Para aqui se ainda precisa de configura√ß√£o
        else:
            # APIs est√£o configuradas, pode pular para o dashboard
            st.session_state.show_welcome = False
    
    # Continua com o dashboard normal se as APIs est√£o configuradas
    
    # Header
    st.markdown('<h1 class="main-header">üåç Climate & Air Quality Analytics</h1>', 
                unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Sidebar para configura√ß√µes
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes")
        
        # Verifica√ß√£o de APIs
        api_status = check_api_configuration()
        display_api_status(api_status)
        
        st.markdown("---")
        
        # Sele√ß√£o de localiza√ß√£o
        location_type = st.radio(
            "Tipo de localiza√ß√£o:",
            ["Cidade", "Coordenadas", "Localiza√ß√£o atual"]
        )
        
        if location_type == "Cidade":
            city = st.text_input("Cidade:", value=Config.DEFAULT_CITY)
            country = st.text_input("Pa√≠s (c√≥digo):", value=Config.DEFAULT_COUNTRY)
            location = {"type": "city", "city": city, "country": country}
        elif location_type == "Coordenadas":
            lat = st.number_input("Latitude:", value=Config.DEFAULT_LAT, format="%.4f")
            lon = st.number_input("Longitude:", value=Config.DEFAULT_LON, format="%.4f")
            location = {"type": "coords", "lat": lat, "lon": lon}
        else:
            location = {"type": "current"}
            st.info("üìç Usando localiza√ß√£o padr√£o: S√£o Paulo, BR")
    
    # Conte√∫do principal
    if not any(api_status.values()):
        show_setup_instructions()
        return
      # Tabs principais
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìä Dashboard Principal", 
        "üå°Ô∏è An√°lise Clim√°tica", 
        "üí® Qualidade do Ar", 
        "ü§ñ Previs√µes IA",
        "üß† An√°lise Avan√ßada"
    ])
    
    with tab1:
        show_main_dashboard(location)
    
    with tab2:
        show_climate_analysis(location)
    
    with tab3:
        show_air_quality_analysis(location)
    
    with tab4:
        show_ai_predictions(location)
    
    with tab5:
        show_advanced_analysis()

def check_api_configuration():
    """Verifica se as APIs est√£o configuradas."""
    return Config.validate_api_keys()

def display_api_status(api_status):
    """Exibe o status das APIs na sidebar."""
    st.subheader("üì° Status das APIs")
    
    for api, status in api_status.items():
        if status:
            st.success(f"‚úÖ {api.title()}: Configurada")
        else:
            st.error(f"‚ùå {api.title()}: N√£o configurada")

def show_setup_instructions():
    """Mostra instru√ß√µes de configura√ß√£o."""
    st.error("üîë APIs n√£o configuradas!")
    
    st.markdown("""
    ### Configura√ß√£o necess√°ria:
    
    1. **Crie um arquivo `.env`** na raiz do projeto
    2. **Obtenha chaves gratuitas das APIs:**
       - [OpenWeatherMap](https://openweathermap.org/api) para dados meteorol√≥gicos
       - [AirVisual](https://www.airvisual.com/api) para qualidade do ar
    
    3. **Adicione as chaves no arquivo `.env`:**
    ```
    OPENWEATHER_API_KEY=sua_chave_aqui
    AIRVISUAL_API_KEY=sua_chave_aqui
    ```
    
    4. **Reinicie a aplica√ß√£o**
    """)

def show_main_dashboard(location):
    """Dashboard principal com vis√£o geral."""
    st.header("üìä Vis√£o Geral")
    
    try:
        # Dados meteorol√≥gicos
        if Config.OPENWEATHER_API_KEY:
            weather_data = get_weather_data(location)
            if weather_data:
                display_weather_overview(weather_data)
        
        # Dados de qualidade do ar
        if Config.AIRVISUAL_API_KEY:
            air_data = get_air_quality_data(location)
            if air_data:
                display_air_quality_overview(air_data)
        
        # Mapa interativo
        display_interactive_map(location)
        
    except Exception as e:
        st.error(f"Erro ao carregar dados: {str(e)}")

def get_weather_data(location):
    """Obt√©m dados meteorol√≥gicos."""
    try:
        client = OpenWeatherClient()
        
        if location["type"] == "city":
            return client.get_current_weather(location["city"], location["country"])
        elif location["type"] == "coords":
            return client.get_current_weather_by_coords(location["lat"], location["lon"])
        else:
            return client.get_current_weather(Config.DEFAULT_CITY, Config.DEFAULT_COUNTRY)
    
    except Exception as e:
        st.error(f"Erro ao obter dados meteorol√≥gicos: {str(e)}")
        return None

def get_air_quality_data(location):
    """Obt√©m dados de qualidade do ar."""
    try:
        client = AirQualityClient()
        
        if location["type"] == "coords":
            return client.get_air_quality_by_coords(location["lat"], location["lon"])
        else:
            # Para cidade ou localiza√ß√£o atual, usa coordenadas padr√£o
            return client.get_air_quality_by_coords(Config.DEFAULT_LAT, Config.DEFAULT_LON)
    
    except Exception as e:
        st.error(f"Erro ao obter dados de qualidade do ar: {str(e)}")
        return None

def display_weather_overview(weather_data):
    """Exibe overview dos dados meteorol√≥gicos."""
    st.subheader("üå°Ô∏è Condi√ß√µes Meteorol√≥gicas")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "Temperatura",
            f"{weather_data['weather']['temperature']:.1f}¬∞C",
            f"Sensa√ß√£o: {weather_data['weather']['feels_like']:.1f}¬∞C"
        )
    
    with col2:
        st.metric(
            "Umidade",
            f"{weather_data['weather']['humidity']}%"
        )
    
    with col3:
        st.metric(
            "Press√£o",
            f"{weather_data['weather']['pressure']} hPa"
        )
    
    with col4:
        st.metric(
            "Vento",
            f"{weather_data['wind']['speed']} m/s"
        )
    
    # Informa√ß√µes adicionais
    st.info(f"üìç {weather_data['location']['city']}, {weather_data['location']['country']} | "
           f"üå§Ô∏è {weather_data['weather']['description'].title()}")

def display_air_quality_overview(air_data):
    """Exibe overview da qualidade do ar."""
    st.subheader("üí® Qualidade do Ar")
    
    aqi = air_data['air_quality']['aqi_us']
    aqi_info = AirQualityClient.get_aqi_category(aqi)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("√çndice AQI (US)", aqi)
        
    with col2:
        st.markdown(f"""
        <div style="background-color: {aqi_info['color']}; padding: 10px; border-radius: 5px; color: white;">
            <strong>{aqi_info['category']}</strong><br>
            {aqi_info['description']}
        </div>
        """, unsafe_allow_html=True)

def display_interactive_map(location):
    """Exibe mapa interativo."""
    st.subheader("üó∫Ô∏è Localiza√ß√£o")
    
    # Determina coordenadas para o mapa
    if location["type"] == "coords":
        lat, lon = location["lat"], location["lon"]
    else:
        lat, lon = Config.DEFAULT_LAT, Config.DEFAULT_LON
    
    # Cria mapa
    m = folium.Map(location=[lat, lon], zoom_start=10)
    folium.Marker([lat, lon], popup="Localiza√ß√£o atual").add_to(m)
    
    # Exibe mapa
    st_folium(m, width=700, height=500)

def show_climate_analysis(location):
    """Tab de an√°lise clim√°tica detalhada."""
    st.header("üå°Ô∏è An√°lise Clim√°tica Detalhada")
    st.info("üöß Em desenvolvimento - An√°lises hist√≥ricas e tend√™ncias clim√°ticas")

def show_air_quality_analysis(location):
    """Tab de an√°lise de qualidade do ar."""
    st.header("üí® An√°lise de Qualidade do Ar")
    st.info("üöß Em desenvolvimento - An√°lise detalhada de poluentes e tend√™ncias")

def show_ai_predictions(location):
    """Tab de previs√µes com IA."""
    st.header("ü§ñ Previs√µes com Intelig√™ncia Artificial")
    st.info("üöß Em desenvolvimento - Modelos de ML para previs√µes clim√°ticas")

def show_advanced_analysis():
    """Tab de an√°lise avan√ßada com novos componentes."""
    st.header("üß† An√°lise Avan√ßada de Dados Clim√°ticos")
    
    # Verifica se h√° dados no banco
    db_path = Config.DATABASE_PATH
    
    try:
        import sqlite3
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM weather_data")
            weather_count = cursor.fetchone()[0]
            
            if weather_count == 0:
                st.warning("‚ö†Ô∏è N√£o h√° dados suficientes para an√°lise avan√ßada. Execute o coletor de dados primeiro.")
                return
    except Exception as e:
        st.error(f"Erro ao verificar banco de dados: {e}")
        return
    
    # Seletores de tipo de an√°lise
    analysis_options = st.multiselect(
        "Selecione os tipos de an√°lise:",
        [
            "üö® Sistema de Alertas Inteligentes",
            "üîó An√°lise de Correla√ß√µes",
            "üåø √çndice de Sa√∫de Ambiental",
            "üîÆ Previs√µes Baseadas em Tend√™ncias"
        ],
        default=["üö® Sistema de Alertas Inteligentes", "üåø √çndice de Sa√∫de Ambiental"]
    )
    
    st.markdown("---")
    
    # Renderiza componentes selecionados
    if "üö® Sistema de Alertas Inteligentes" in analysis_options:
        DashboardComponents.render_alert_panel(db_path)
        st.markdown("---")
    
    if "üîó An√°lise de Correla√ß√µes" in analysis_options:
        DashboardComponents.render_correlation_analysis(db_path)
        st.markdown("---")
    
    if "üåø √çndice de Sa√∫de Ambiental" in analysis_options:
        DashboardComponents.render_environmental_health_index(db_path)
        st.markdown("---")
    
    if "üîÆ Previs√µes Baseadas em Tend√™ncias" in analysis_options:
        DashboardComponents.render_forecast_panel(db_path)

if __name__ == "__main__":
    main()
